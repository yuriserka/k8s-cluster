services:
  api:
    image: kafka-producer-api-local:latest
    build:
      context: .
      dockerfile: app/containers/api/Dockerfile.dev
    ports:
      - "8080:8080"
    environment:
      OTEL_JAVAAGENT_ENABLED: false
    depends_on:
      - kafka
      - postgres
  
  scheduler:
    image: kafka-producer-scheduler-local:latest
    build:
      context: .
      dockerfile: app/containers/scheduler/Dockerfile.dev
    ports:
      - "8081:8080"
    environment:
      OTEL_JAVAAGENT_ENABLED: false
    depends_on:
      - kafka
      - postgres
  
  kafka:
    image: bitnami/kafka:4.0
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      # KRaft settings
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093
      # Listeners
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT

  postgres:
    image: bitnami/postgresql:16
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/bitnami/postgresql
    environment:
      POSTGRESQL_USERNAME: ysdcr
      POSTGRESQL_PASSWORD: ysdcr
      POSTGRESQL_POSTGRES_PASSWORD: admin
      POSTGRESQL_DATABASE: kafka-producer

volumes:
  kafka_data:
    driver: local
  postgres_data:
    driver: local